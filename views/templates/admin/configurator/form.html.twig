{% extends '@Modules/drsoftfrproductwizard/views/templates/admin/base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/css/tom-select.bootstrap4.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/js/tom-select.complete.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

    <style>
        /* Style de base pour les éléments de la liste */
        .sortable-list > * {
            transition: all 0.3s ease;
            overflow: hidden;
        }

        /* Style pour l'élément fantôme (emplacement où l'item sera déposé) */
        .sortable-ghost {
            background-color: #f8f9fa !important;
            border: 2px dashed #ccc !important;
            opacity: 0.7 !important;
        }

        /* Style pour l'élément actuellement sélectionné et déplacé */
        .sortable-chosen {
            background-color: #fff !important;
        }

        /* Style pour l'élément en cours de déplacement */
        .sortable-drag {
            background-color: #fff !important;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2) !important;
            opacity: 0.9 !important;
            max-height: 50px !important;
            overflow: hidden !important;
            z-index: 9999 !important;
            border-radius: 4px !important;
        }
    </style>
{% endblock %}

{% block main %}
    <div class="row justify-content-center">
        <div class="col">
            <div class="card">
                <h1 class="card-header">{{ form.vars.value.id ? 'Éditer le scénario' : 'Créer un scénario' }}</h1>
                <div class="card-body">
                    {{ form_start(form) }}
                    {{ form_errors(form) }}
                    <div class="form-group mb-3">
                        {{ form_row(form.name) }}
                        {{ form_row(form.active) }}
                    </div>

                    <div x-data="stepManager({{ form.steps|length }})">
                        <h2 class="mb-2">Étapes du scénario</h2>
                        <div id="steps-collection" class="sortable-list">
                            {% for stepForm in form.steps %}
                                {% include '@Modules/drsoftfrproductwizard/views/templates/admin/configurator/_step_form.html.twig' with { 'form': stepForm, 'idx': loop.index0 } %}
                            {% else %}
                                <div class="alert alert-info">Aucune étape définie pour ce scénario.</div>
                            {% endfor %}
                        </div>

                        <template id="step-prototype">
                            {% include '@Modules/drsoftfrproductwizard/views/templates/admin/configurator/_step_form.html.twig' with { 'form': form.steps.vars.prototype, 'idx': '__step__' } %}
                        </template>
                        <button type="button" class="btn btn-outline-primary mt-2" @click="addStep">Ajouter une étape
                        </button>
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-success">Enregistrer</button>
                        <a class="btn btn-secondary"
                           href="{{ path('admin_drsoft_fr_product_wizard_configurator_index') }}">Retour</a>
                    </div>

                    {% if form._token is defined %}
                        {{ form_widget(form._token) }}
                    {% endif %}

                    {{ form_end(form, {render_rest: false}) }}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
      function initProductSelectors() {
        const elms = document.querySelectorAll('input.product-selector:not([data-ts-initialized])')

        if (!elms.length) {
          return
        }

        elms.forEach(function(input) {
          if (!input) {
            return
          }

          if (input.tomselect) {
            input.tomselect.destroy()
          }

          try {
            let options = {
              valueField: 'id',
              labelField: 'text',
              searchField: 'text',
              maxOptions: 20,
              maxItems: 1,
              create: false,
              load: function(query, callback) {
                if (!query.length) return callback()
                fetch(window.drsoftfrproductwizard.routes.product_search + '&q=' + encodeURIComponent(query))
                  .then(response => response.json())
                  .then(json => callback(json.items))
                  .catch(() => callback())
              },
              onChange: function(value) {
                let hidden = document.querySelector(input.dataset.target)
                if (hidden) hidden.value = value
              }
            }
            let ts = new TomSelect(input, options)

            input.setAttribute('data-ts-initialized', '1')
          } catch (e) {
            console.error('Erreur lors de l\'initialisation de Tom Select:', e)
          }
        })
      }

      function stepManager(initialIdx) {
        return {
          idx: initialIdx,
          addStep() {
            let tpl = document.getElementById('step-prototype').innerHTML.replace(/__step__/g, this.idx)

            let alert = document.querySelector('#steps-collection .alert')

            if (alert) {
              alert.remove()
            }

            document.getElementById('steps-collection').insertAdjacentHTML('beforeend', tpl)
            this.idx++
          }
        }
      }

      function productChoiceManager(initialIdx, stepIdx) {
        return {
          idx: initialIdx,
          addProductChoice() {
            let tpl = document.getElementById('step-' + stepIdx + '__product-choice-prototype').innerHTML.replace(/__choice__/g, this.idx)

            let alert = document.querySelector('#step-' + stepIdx + '__product-choices-collection .alert')

            if (alert) {
              alert.remove()
            }

            document.getElementById('step-' + stepIdx + '__product-choices-collection').insertAdjacentHTML('beforeend', tpl)
            setTimeout(initProductSelectors, 100)
            this.idx++
          },
          uncheckOthers(event) {
            const container = event.target.closest('.step-block')
            const checkboxes = container.querySelectorAll('input[type=checkbox][name*="[isDefault]"]')

            checkboxes.forEach(cb => {
              if (cb !== event.target) cb.checked = false
            })
          }
        }
      }

      document.addEventListener('alpine:init', () => {
        Alpine.directive('sync-label', (el, { expression }, { evaluate }) => {
          const container = el.closest('.sortable-item, .card, .step-block')
          if (!container) return

          const labelSpan = container.querySelector('.js-label')
          if (!labelSpan) return

          labelSpan.textContent = el.value || 'Sans titre'

          el.addEventListener('input', () => {
            labelSpan.textContent = el.value || 'Sans titre'
          })
        })
      })

      document.addEventListener('DOMContentLoaded', function() {
        const stepsList = document.getElementById('steps-collection')
        if (stepsList) {
          new Sortable(stepsList, {
            animation: 150,
            handle: '.step-drag-handle', // Met un handle visuel pour déplacer
            ghostClass: 'sortable-ghost', // Classe CSS pour le fantôme durant le drag
            chosenClass: 'sortable-chosen', // Classe CSS pour l'élément sélectionné
            dragClass: 'sortable-drag', // Classe CSS pour l'élément en cours de drag
            onEnd: function() {
              // Après drag&drop, réindexe les champs 'position' si besoin
              stepsList.querySelectorAll('.step-block').forEach(function(block, idx) {
                let posInput = block.querySelector('input[name*="[position]"]')
                if (posInput) {
                  posInput.value = idx
                }
              })
              document.body.classList.remove('dragging-active')
              document.querySelectorAll('.sortable-list').forEach(l => {
                l.classList.remove('inactive-list', 'active-list')
              })

            },
            // Personnaliser l'élément fantôme
            onStart: function(evt) {
              document.body.classList.add('dragging-active')

              // Identifier quelle liste est active
              document.querySelectorAll('.sortable-list').forEach(l => {
                l.classList.add('inactive-list')
              })
              document.querySelectorAll('.sortable-list .card-body.collapse.show').forEach(l => {
                l.classList.remove('show')
              })
              evt.from.classList.remove('inactive-list')
              evt.from.classList.add('active-list')
            }
          })
        }
        setTimeout(initProductSelectors, 100)
      })
    </script>
{% endblock %}