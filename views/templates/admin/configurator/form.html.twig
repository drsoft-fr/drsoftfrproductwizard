{% extends '@Modules/drsoftfrproductwizard/views/templates/admin/base.html.twig' %}

{% block main %}
    <div class="row justify-content-center">
        <div class="col">
            <div class="card">
                <h1 class="card-header">{{ form.vars.value.id ? 'Éditer le scénario' : 'Créer un scénario' }}</h1>
                <div class="card-body">
                    {{ form_start(form) }}
                    <div class="form-group mb-3">
                        {{ form_row(form.name) }}
                        {{ form_row(form.active) }}
                    </div>

                    <div x-data="stepManager({{ form.steps|length }})">
                        <h2 class="mb-2">Étapes du scénario</h2>
                        <div id="steps-collection" class="sortable-list">
                            {% for stepForm in form.steps %}
                                {% include '@Modules/drsoftfrproductwizard/views/templates/admin/configurator/_step_form.html.twig' with { 'form': stepForm, 'idx': loop.index0 } %}
                            {% else %}
                                <div class="alert alert-info">Aucune étape définie pour ce scénario.</div>
                            {% endfor %}
                        </div>

                        <template id="step-prototype">
                            {% include '@Modules/drsoftfrproductwizard/views/templates/admin/configurator/_step_form.html.twig' with { 'form': form.steps.vars.prototype, 'idx': '__step__' } %}
                        </template>
                        <button type="button" class="btn btn-outline-primary mt-2" @click="addStep">Ajouter une étape
                        </button>
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-success">Enregistrer</button>
                        <a class="btn btn-secondary"
                           href="{{ path('admin_drsoft_fr_product_wizard_configurator_index') }}">Retour</a>
                    </div>

                    {% if form._token is defined %}
                        {{ form_widget(form._token) }}
                    {% endif %}

                    {{ form_end(form, {render_rest: false}) }}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

    <script>
      function stepManager(initialIdx) {
        return {
          idx: initialIdx,
          addStep() {
            let tpl = document.getElementById('step-prototype').innerHTML.replace(/__step__/g, this.idx)

            let alert = document.querySelector('#steps-collection .alert')

            if (alert) {
              alert.remove()
            }

            document.getElementById('steps-collection').insertAdjacentHTML('beforeend', tpl)
            this.idx++
          }
        }
      }

      function productChoiceManager(initialIdx, stepIdx) {
        return {
          idx: initialIdx,
          addProductChoice() {
            let tpl = document.getElementById('product-choice-prototype-' + stepIdx).innerHTML.replace(/__choice__/g, this.idx)

            let alert = document.querySelector('#product-choices-collection-' + stepIdx + ' .alert')

            if (alert) {
              alert.remove()
            }

            document.getElementById('product-choices-collection-' + stepIdx).insertAdjacentHTML('beforeend', tpl)
            this.idx++
          }
        }
      }

      document.addEventListener('alpine:init', () => {
        Alpine.directive('sync-label', (el, { expression }, { evaluate }) => {
          const container = el.closest('.sortable-item, .card, .step-block')
          if (!container) return

          const labelSpan = container.querySelector('.js-label')
          if (!labelSpan) return

          labelSpan.textContent = el.value || 'Sans titre'

          el.addEventListener('input', () => {
            labelSpan.textContent = el.value || 'Sans titre'
          })
        })
      })

      document.addEventListener('DOMContentLoaded', function() {
        const stepsList = document.getElementById('steps-collection')
        if (stepsList) {
          new Sortable(stepsList, {
            animation: 150,
            handle: '.step-drag-handle', // Met un handle visuel pour déplacer
            ghostClass: 'sortable-ghost', // Classe CSS pour le fantôme durant le drag
            chosenClass: 'sortable-chosen', // Classe CSS pour l'élément sélectionné
            dragClass: 'sortable-drag', // Classe CSS pour l'élément en cours de drag
            onEnd: function() {
              // Après drag&drop, réindexe les champs 'position' si besoin
              stepsList.querySelectorAll('.step-block').forEach(function(block, idx) {
                let posInput = block.querySelector('input[name*="[position]"]')
                if (posInput) {
                  posInput.value = idx
                }
              })
              document.body.classList.remove('dragging-active')
              document.querySelectorAll('.sortable-list').forEach(l => {
                l.classList.remove('inactive-list', 'active-list')
              })

            },
            // Personnaliser l'élément fantôme
            onStart: function(evt) {
              document.body.classList.add('dragging-active')

              // Identifier quelle liste est active
              document.querySelectorAll('.sortable-list').forEach(l => {
                l.classList.add('inactive-list')
              })
              document.querySelectorAll('.sortable-list .card-body.collapse.show').forEach(l => {
                l.classList.remove('show')
              })
              evt.from.classList.remove('inactive-list')
              evt.from.classList.add('active-list')
            }
          })
        }
      })
    </script>
{% endblock %}